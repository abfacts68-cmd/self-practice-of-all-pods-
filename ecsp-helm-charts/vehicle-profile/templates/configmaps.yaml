apiVersion: v1
kind: ConfigMap
metadata:
  name: oss-vehicle-profile-api-health-config
  labels:
    app: vehicle-profile-api
    group: api
    ms: {{ .Values.ms | quote }}
data:
  api_readiness.sh: |+
    #!/bin/sh
    wget -O /usr/local/tomcat/metrics http://localhost:8080/metrics
    file="/usr/local/tomcat/metrics"
    if [ -f "$file" ]
    then
      echo "$file found."
      serviceHealth=$(grep SERVICE_HEALTH $file | cut -d' ' -f2)
      if [ "$serviceHealth" == "1.0" ]; then
        echo "Service is unhealthy during readiness check"
        rm "$file"
        exit 1
      else
        echo "Service is healthy during readiness check"
      fi
        rm "$file"
    else
      echo "$file not found."
    fi
  api_liveness.sh: |+
    #!/bin/sh
    wget -O /usr/local/tomcat/metrics http://localhost:8080/metrics
    file="/usr/local/tomcat/metrics"
    if [ -f "$file" ]
    then
      echo "$file found."
      serviceHealth=$(grep SERVICE_HEALTH $file | cut -d' ' -f2)
      if [ "$serviceHealth" == "1.0" ]; then
        echo "Service is unhealthy during liveness check"
        rm "$file"
        exit 1
      else
        echo "Service is healthy during liveness check"
      fi
        rm "$file"
    else
      echo "$file not found."
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oss-vehicle-profile-api-config
  labels:
    app: vehicle-profile-api
    group: api
    ms: {{ .Values.ms | quote }}
data:
  log-level: "DEBUG"
  mongodb_name: {{ .Values.mongodb.databaseName | quote }}
  mongodb_port: {{ .Values.mongodb.port | quote }}
  mongodb_hosts: {{ .Values.mongodb.host | quote }}
  mongodb_auth_db: "TO-BE-UPDATED"
  mongodb_qr_global_svc: {{ .Values.mongodb.host | quote }}
  mongodb_read_preference: "primaryPreferred"
  mongodb.collection.shardkey.map: {{ .Values.vehicle_profile_api.mongodb_collection_shardkey_map | quote }}
  vehicleProfile_kafka_enabled: {{ .Values.vehicle_profile_api.vehicleProfile_kafka_enabled | quote }}
  kafka_producer_service_enabled: {{ .Values.vehicle_profile_api.vehicleProfile_kafka_enabled | quote }}
  kafka_ssl_enable: "false"
  kafka_acks: {{ .Values.vehicle_profile_api.kafka_acks | quote }}
  kafka_broker_url: "kafka-0.kafka-svc.data-platform:9093,kafka-1.kafka-svc.data-platform:9093,kafka-2.kafka-svc.data-platform:9093"
  JAVA_OPTS: {{ .Values.vehicle_profile_api.jvmOpts | quote }}
  vehicleprofile_auto_generate_vehicleId: {{ .Values.vehicle_profile_api.vehicleprofile_auto_generate_vehicleId | quote }}
  vin_decode_enable: {{ .Values.vehicle_profile_api.vinDecodeEnabled | quote }}
  vin_decoder: {{ .Values.vehicle_profile_api.vinDecoder | quote }}
  default_vin_decode_url: {{ .Values.vehicle_profile_api.defaultVinDecoderUrl | quote }}
  vehicle_specification_auth_base_url: {{ .Values.vehicle_profile_api.vsAuthBaseUrl | quote }}
  vehicle_specification_auth_token_url: "/oauth/token"
  vehicle_specification_auth_token_audience: {{ .Values.vehicle_profile_api.vsAuthTokenAudience | quote }}
  vehicle_specification_auth_token_grant_type: "client_credentials"
  vehicle_specification_vin_decode_base_url: {{ .Values.vehicle_profile_api.VinDecodeBaseUrl | quote }}
  vehicle_specification_vin_decode_url: {{ .Values.vehicle_profile_api.vehicle_specification_vin_decode_url | quote }}
  vehicle_association_base_url: {{ .Values.vehicle_profile_api.vehicle_association_base_url | quote }}
  vehicleProfile_block_enrollment: {{ .Values.vehicle_profile_api.vehicleProfileBlockEnrollment | quote }}
  redis_mode: "SENTINEL"
  redis_master_name: "redis-sentinel"
  redis_sentinels: {{ .Values.vehicle_profile_api.redisSentinels | quote }}
  redis_cluster_masters: {{ .Values.vehicle_profile_api.redisCluster | quote }}
  redis_address: ""
  redis_database: "0"
  redis_scan_limit: "10000"
  redis_scan_interval: "10000"
  redis_read_mode: "MASTER"
  redis_subscription_mode: "MASTER"
  metrics_enabled: "true"
  metrics_prometheus_enabled: "true"
  performance_monitoring_enabled: "true"
  health_mqtt_monitor_enabled : {{ .Values.vehicle_profile_api.health.healthMqtt | quote }}
  health_mongo_monitor_enabled : {{ .Values.vehicle_profile_api.health.healthMongo | quote }}
  health_kafka_consumer_group.monitor_enabled : {{ .Values.vehicle_profile_api.health.healthKafkaConsumer | quote }}
  health_device_status_backdoor.monitor_enabled : {{ .Values.vehicle_profile_api.health.healthDMA | quote }}
  health_dff_feed.backdoor_monitor_enabled : {{ .Values.vehicle_profile_api.health.healthDFF | quote }}
  health_kafka_topics_monitor_enabled : {{ .Values.vehicle_profile_api.health.healthKafkaTopics | quote }}
  health_redis_monitor_enabled : {{ .Values.vehicle_profile_api.health.healthRedis | quote }}
  disable_dev_assoc_check: {{ .Values.vehicle_profile_api.disableDevAssocCheck | quote }}
  health_mongo_monitor_enabled: "true"
  health_service_failure_retry_thrshold: "2"
  health_service_failure_retry_interval_millis: "2000"

  api_gateway_service_name: {{ .Values.api_gateway.api_gateway_service_name | quote }}
  api_registry_enabled: {{ .Values.api_gateway.api_registry_enabled | quote }}
  api_security_enabled: {{ .Values.api_gateway.api_security_enabled | quote }}
  spring_application_version: {{ .Values.api_gateway.spring_application_version | quote }}
  spring_application_servicename: "oss-vehicle-profile-api-int-svc"
  spring_application_name: "vehicle-profile-api"
  server_port: "8080"
  api_registry_service_name: {{ .Values.api_gateway.api_registry_service_name | quote }}
  openapi_path_include: {{ .Values.api_gateway.openapi_path_include | quote }}

  allowed_device_types : {{ .Values.global_param.allowedDeviceTypes | quote }}
  encrypt_log: {{ .Values.logging.encryptLog | quote }}
  NEVER_BLOCK_FOR_GRAYLOG: "true"
  GRAYLOG_HOST: {{ .Values.logging.graylogHost | quote }}
  GRAYLOG_PORT: {{ .Values.logging.graylogPort | quote }}
  LOG_LEVEL: {{ .Values.logging.logLevel | quote }}
  SVC_LOG_LEVEL: {{ .Values.logging.svcLogLevel | quote }}
  SVC_CONSOLE_LOG_LEVEL: {{ .Values.logging.svcConsoleLogLevel | quote }}
  IGNITE_LOG_LEVEL: {{ .Values.logging.igniteLogLevel | quote }}
  STORAGE_LOG_LEVEL: {{ .Values.logging.storageLogLevel | quote }}
  SPRING_LOG_LEVEL: {{ .Values.logging.springLogLevel | quote }}
  CACHE_LOG_LEVEL: {{ .Values.logging.cacheLogLevel | quote }}
  KAFKA_LOG_LEVEL: {{ .Values.logging.kafkaLogLevel | quote }}
  STREAM_BASE_LOG_LEVEL: {{ .Values.logging.streamBaseLogLevel | quote }}
  LOG_APPENDER: {{ .Values.logging.logAppender | quote }}
  REGISTRY_COMMON_LOG_LEVEL: {{ .Values.logging.registryCommonLogLevel | quote }}
{{- if .Values.vehicle_profile_api.extraParams }}
{{ toYaml .Values.vehicle_profile_api.extraParams | indent 2 }}
{{- end }} 
