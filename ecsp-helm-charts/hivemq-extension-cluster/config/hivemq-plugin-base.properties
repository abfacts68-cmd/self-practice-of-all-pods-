#################################################################################################
#					RELOADABLE PROPERTY
#################################################################################################

#Device authorization keys
mqtt.qos.level={{.Values.global.hivemq.plugin_base.mqtt_qos_level}}

jwt.validation.enabled={{.Values.global.hivemq.plugin_base.jwt_validation_enabled}}
jwt.valid.scopes={{.Values.global.hivemq.plugin_base.jwt_valid_scopes}}

allowed.blob.sources={{.Values.global.hivemq.plugin_base.allowed_blob_sources}}
allowed.blob.encodings={{.Values.global.hivemq.plugin_base.allowed_blob_encodings}}
#transform.<blob source>.<blob type>. Mapping of source and type to kafka topic
transform.ignite.json={{.Values.global.hivemq.plugin_base.transform_ignite_json}}
transform.fca.gpb={{.Values.global.hivemq.plugin_base.transform_fca_gpb}}

#Mqtt topic to kafka topic routing
#<serviceid (mqtt topic)>,<service name (sp)>,<kafka topic>,<device status required>;...
mqtt.topic.service.mapping={{.Values.global.hivemq.plugin_base.mqtt_topic_service_mapping}}

#Device authorization keys
device.mqtt.publish.topics={{.Values.global.hivemq.plugin_base.device_mqtt_publish_topics}}
device.mqtt.subscribe.topics={{.Values.global.hivemq.plugin_base.device_mqtt_subscribe_topics}}

# Use ',' char to separate
profile.check.disabled.topics={{.Values.global.hivemq.plugin_base.profile_check_disabled_topics}}
user.mqtt.subscribe.topics={{.Values.global.hivemq.plugin_base.user_mqtt_subscribe_topics}}

#################################################################################################
#					 NON RELOADABLE PROPERTY
#################################################################################################

max.request.size={{.Values.global.hivemq.persistence.maxMessageSize}}
#kafka Topics
kafka.sink.topic.events=events
kafka.sink.topic.alerts=alerts
kafka.sink.topic.presence.manager=externalpresence

#Ignite internal topics
kafka.sink.topic.connect=connect
kafka.sink.topic.disconnect=disconnect

#Device authorization keys
mqtt.uname.prefix={{.Values.global.hivemq.plugin_base.mqtt_uname_prefix}}
whitelisted.users={{.Values.global.hivemq.plugin_base.whitelisted_users}}
mqtt.user.prefix={{.Values.global.hivemq.plugin_base.mqtt_user_prefix}}

#Kinesis Topics
kinesis.sink.topic.events=san-events
kinesis.sink.topic.alerts=san-alerts
kinesis.sink.topic.connect=connect
kinesis.sink.topic.disconnect=disconnect

#mqtt topics
mqtt.topicFormatter={{.Values.global.hivemq.plugin_base.mqtt_topic_formatter}}
mqtt.topic.prefix={{.Values.global.hivemq.plugin_base.mqtt_topic_prefix}}
mqtt.topic.generalevents.suffix=/events
mqtt.topic.alerts.suffix=/alerts

redis.enabled={{.Values.global.hivemq.plugin_base.redis_enabled}}

#commcheck
commcheck.enableSuscipiousEcuCheck={{.Values.global.hivemq.plugin_base.enableSuscipiousEcuCheck}}
commcheck.deviceStatusUrl={{.Values.global.hivemq.plugin_base.commcheckDeviceStatusUrl}}
#Device to vehicle profile
d2v.http.url={{.Values.global.hivemq.plugin_base.d2v_http_url}}
d2v.http.request.device.id.param=clientId
d2v.http.request.device.type.param=deviceType
d2v.http.response.vehicle.id.key=vehicleId
d2v.http.response.devices.parent.key=ecus
#Kafka details
kafka.broker.url={{.Values.global.hivemq.plugin_base.kafka_broker_url}}
kafka.acks=1
kafka.linger.ms=250
kafka.num.put.retries=4
kafka.key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
kafka.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
kafka.partitioner=org.apache.kafka.clients.producer.internals.DefaultPartitioner
kafka.replace.classloader=true
#set this to true if you don't want any writes to kafka. purpose is to determine time taken without kafka in the processing thread
kafka.no.puts=false
#set this to true if you want async puts. but this means no ordering guarantees
kafka.register.sync.puts=false
kafka.device.events.sync.puts=false
#use -1 to disable logging. logging can tell you how much time it takes to process x number of messages if x is given as the frequency
kafka.log.frequency=10000
#determine the key to use for kafka puts from the topic name in MQTT
kafka.record.key.start.pos=0
kafka.record.key.end.pos=6

kafka.request.timeout.ms=600000
kafka.compression.type=lz4
kafka.batch.size=0
kafka.max.block.ms=30000
kafka.max.in.flight.requests.per.connection=1

kafka.metadata.max.age.ms=60000
kafka.reconnect.backoff.max.ms=100000
kafka.reconnect.backoff.ms=30000

#mqtt topics
mqtt.decompress.enabled=true

#Streaming properties
bootstrap.servers=localhost:9093
zookeeper.connect=localhost:2181

#HiveMq cluster discovery via Redis, node details update interval in Redis
update.interval.in.millis=5000

#Cumulative logging configuration
log.counts=true
log.counts.minutes=1
log.per.pdid=false

#JWT
jwt.publickey.path=/opt/hivemq/conf/publickey.pem

#Plugin configuration
authentication.impl.class={{.Values.global.hivemq.plugin_base.authentication_impl_class}}
authorization.impl.class={{.Values.global.hivemq.plugin_base.authorization_impl_class}}
topic.mapper.impl.class={{.Values.global.hivemq.plugin_base.topic_mapper_impl_class}}
client.lifecycle.impl.class={{.Values.global.hivemq.plugin_base.client_lifecycle_impl_class}}
hivemq.sink.impl.class={{.Values.global.hivemq.plugin_base.hivemq_sink_impl_class}}
device.to.vehicle.mapper.impl={{.Values.global.hivemq.plugin_base.device_to_vehicle_mapper_impl}}
subscription.cache.impl.class={{.Values.global.hivemq.plugin_base.subscription_cache_impl_class}}
plugin.config.class={{.Values.global.hivemq.plugin_base.plugin_config_class}}
vehicle.profile.data.extracter.impl.class={{.Values.global.hivemq.plugin_base.vehicle_profile_data_extracter_impl}}
publish.interceptor.class={{.Values.global.hivemq.plugin_base.publish_interceptor_class}}
service.client.overloadprotection.disabled={{.Values.global.hivemq.plugin_base.service_client_overloadprotection_disabled}}

wrap.with.ignite.event.enabled=true
device.aware.enabled={{.Values.global.hivemq.plugin_base.device_aware_enabled}}
device.aware.enabled.services={{.Values.global.hivemq.plugin_base.device_aware_enabled_services}}
ingestion.serializer.impl={{.Values.global.hivemq.plugin_base.ingestion_serializer_impl}}

#TLS enabled, allow only DeviceMessaging to connect without certificate
#(authenticate via username and password), property used when TLS is enabled
allow.only.whitelist.user.without.cert=false
#TLS certificate related
service.certificate.common.name.prefix=TO-BE-UPDATED
service.certificate.common.names=haa_activation,haa_provisioning

#Http client setting
http.isSingleHttpClient=false
http.connection.timeout.in.sec=120
http.read.timeout.in.sec=10
http.write.timeout.in.sec=10
http.keep.alive.duration.in.sec=120
http.max.idle.connections=20
http.vp.auth.header=Authentication
http.vp.service.user={{.Values.global.hivemq.plugin_base.http_vp_service_user}}
http.vp.service.password={{.Values.global.hivemq.plugin_base.http_vp_service_password}}

#ExpiryHander Configuration
expiry.cache.impl.class={{.Values.global.hivemq.plugin_base.expiry_cache_impl_class}}
expiry.cache.enabled={{.Values.global.hivemq.plugin_base.expiry_cache_enabled}}
expiry.token.prevent.lwt.message=false

#UsernamePassword Authentication
static.password.enabled={{.Values.global.hivemq.plugin_base.static_password_enabled}}
mqtt.user.password={{.Values.global.hivemq.plugin_base.mqtt_user_password}}
internal.service.port=1883,8443

tracing.enabled=false
jaeger.flush.interval.ms=250
jaeger.sampling.probability=0.3
jaeger.agent.port=6831
jaeger.agent.host=localhost
jaeger.tags=component:hivemq
disconnect.on.ping.if.not.connected.enabled={{.Values.global.hivemq.plugin_base.disconnect_on_ping_if_not_connected_enabled}}
health.check.user=health
health.check.port=1888
health.check.topic=health
device.specific.permissions.enabled={{.Values.global.hivemq.plugin_base.device_specific_permissions_enabled}}
keep.alive.topic={{.Values.global.hivemq.plugin_base.keep_alive_topic}}
#Global subscription topics
device.mqtt.global.subscribe.topics={{.Values.global.hivemq.plugin_base.device_mqtt_global_subscribe_topics}}

#Enabling mongo, kafka consumer group and kafka topics health monitors.
health.mqtt.monitor.enabled=true
health.mongo.monitor.enabled=false
health.kafka.consumer.group.monitor.enabled=true
health.device.status.backdoor.monitor.enabled=true
health.dff.feed.backdoor.monitor.enabled=false
health.kafka.topics.monitor.enabled=true
health.redis.monitor.enabled=false
sp.restart.on.failure=false
kafka.topics.file.path=/data/topics.txt
user.cleansession.enabled={{.Values.global.hivemq.plugin_base.user_cleansession_enabled}}
user.qos.level.change.enabled={{.Values.global.hivemq.plugin_base.user_qos_level_change_enabled}}
user.qos.level.value.for.2c={{.Values.global.hivemq.plugin_base.user_qos_level_value_for_2c}}
user.qos.level.value.for.2d={{.Values.global.hivemq.plugin_base.user_qos_level_value_for_2d}}
swap.response.topic.name={{.Values.global.hivemq.plugin_base.swap_response_topic_name}}

user.management.base.url={{.Values.global.hivemq.plugin_base.user_management_base_url}}
user.management.api.url={{.Values.global.hivemq.plugin_base.user_management_api_url}}
dmportal.subs.topic.permissions.impl={{.Values.global.hivemq.plugin_base.dmportal_subs_topic_permissions_impl}}

waitCountBeforeBrokerStop={{.Values.hivemq.brokerStop.waitCount}}
waitTimeMsBeforeBrokerStop={{.Values.hivemq.brokerStop.waitTimeMs}}

publish.subscribe.async.timeout=10
connect.async.timeout=10
disconnect.thread=32
disconnect.thread.delay=200
